import { Collection, Message } from 'discord.js'
import { Command, EmbedBuilder, Command_Args, Command_Pars } from '../utils/classes'
import { emoji_regex, unicode_emoji_regex, message_link } from '../utils/regex'
import { emojis } from '../events/emoji_data'
import { fetchMessageLink } from '../utils/functions'

const command_array = [
    class EmojiCommand extends Command {
        message: Message
        emoji_array: string[]
        matches: unknown[][]
        separator: string
        choise: number
        ignore_case: boolean

        public constructor() {
            super({
                names: ['emoji', 'em'],
                description: '–í—ã–≤–æ–¥–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏.',
                additional: '–ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞.\n' +
                '(–Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–∏ –ø–æ–∏—Å–∫–µ "yes" –Ω–∞–π–¥—ë—Ç—Å—è "Yes", –Ω–æ –Ω–µ "ohYes")',
                args: [
                    {
                        name: 'emoji_array',
                        description: '–≠–º–æ–¥–∑–∏, —Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞ —ç–º–æ–¥–∑–∏, –ª–∏–±–æ –∏—Ö ID.\n–¢–∞–∫ –∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏.\n' +
                        '(–Ω–∞–ø—Ä–∏–º–µ—Ä "trololo", "801454131101302814" –∏–ª–∏ "üëçüèø")',
                        required: true,
                        features: 'array'
                    }
                ],
                pars: [
                    {
                        names: ['-s'],
                        description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —ç–º–æ–¥–∑–∏.'
                    },
                    {
                        names: ['--choise', '-ch'],
                        description: '–ó–∞—Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é —ç–º–æ–¥–∑–∏.',
                        args: [
                            {
                                name: 'choise',
                                type: 'Number',
                                required: true
                            }
                        ]
                    },
                    {
                        names: ['--dont-ignore-case', '-dic'],
                        description: '–ù–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.'
                    }
                ],
                client_perms: ['UseExternalEmojis']
            })
        }

        public async execute(args: Command_Args, pars: Command_Pars) {
            this.message = args.message as Message
            this.ignore_case = true
            this.separator = ''
            this.emoji_array = this._content_fix(args.emoji_array as string[])
            this.matches = this._find_emojis()
            delete this.choise

            for (const [par, par_args] of Object.entries(pars)) {
                switch (par) {
                    case '-s': {
                        this.separator = ' '
                        break
                    }
                    case '--choise': {
                        const num = par_args.choise as number
                        if (Number.isNaN(num)) break

                        this.choise = num - 1
                        break
                    }
                    case '--dont-ignore-case': {
                        this.ignore_case = false
                        break
                    }
                }
            }

            //some emojis check
            if (!this.matches.filter(v => v.length > 1).empty) {
                const options = []
                const positions = []

                for (let i = 0; i < this.matches.length; i++) positions.push(0)

                while (true) {
                    if (options.length > 10) return

                    options.push(positions.map((pos, index) => this.matches[index][pos]).join(this.separator))
                    let found_increment = false
                    for (let i = 0; i < positions.length; i++) {
                        positions[i]++

                        if (positions[i] < this.matches[i].length) {
                            found_increment = true
                            break
                        } else { 
                            positions[i] = 0 
                        }
                    }
                
                    if (!found_increment) break
                }
                if (this.choise !== undefined) {
                    return this.message.channel.send(options[this.choise] ?? '‚ùå')
                } else {
                    return this._choose(options)
                }
            }

            return this.message.channel.send(this.matches.join(this.separator).replace(/\n\s/g, '\n'))
        }

        private _content_fix(emoji_array: string[]): string[] {
            const rt = []
            emoji_array.forEach(v => rt.push(...v.ssplit('\n')))
            return rt
        }

        private _find_emojis(): unknown[][] {
            const rt = []

            for (const char of this.emoji_array) {
                if (!char) continue

                const unicode_emoji = char.match(unicode_emoji_regex)
                const emoji_string_regex = char.match(emoji_regex)
                const matches = []

                if (unicode_emoji || char == '\n') matches.push(char)
                if (this.ignore_case) {
                    if (emoji_string_regex) {
                        matches.push(...emojis.filter(v => 
                            v.name.toLocaleLowerCase() == emoji_string_regex[1].toLocaleLowerCase() || v.id == emoji_string_regex[2]
                        ))
                    }

                    matches.push(...emojis.filter(v => 
                        v.name.toLocaleLowerCase() == char.toLocaleLowerCase() ||
                        v.id == char
                    ))
                } else {
                    if (emoji_string_regex) {
                        matches.push(...emojis.filter(v => 
                            v.name == emoji_string_regex[1] || v.id == emoji_string_regex[2]
                        ))
                    }

                    matches.push(...emojis.filter(v => 
                        v.name == char ||
                        v.id == char
                    ))
                }

                rt.push(!matches.empty ? matches : ['‚ùå'])
            }

            return rt
        }

        private _choose(options: string[]): unknown {
            const Embed = new EmbedBuilder()
                .setTitle('–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...')
                .setDescription(options.map((v, i) => `\`${i + 1}\`\n${v}\n`).join('\n'))
                .setFooter({ text: '–í —Ç–µ—á–µ–Ω–∏–∏ 20—Å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞.' })

            if (Embed.data.description.length >= 6000) return this.message.react('‚ùå')

            const sent_message = this.message.channel.send({ embeds: [Embed] })
            const collector = this.message.channel.createMessageCollector({
                filter: msg => msg.author.id == this.message.author.id, 
                time: 20000
            })
            collector.on('collect', async (msg: Message) => {
                const num = Number(msg.content)
                if (Number.isNaN(num) || options.length < num || num < 1) return

                collector.stop()
                this.message.channel.send(options[num - 1])

                try {
                    await (await sent_message).delete()
                } catch (error) {}

                if (this.message.channel.isDMBased()) return
                if (this.message.channel.permissionsFor(this.message.client.user).has('ManageMessages')) {
                    await msg.delete()
                }
            })
            collector.on('end', async (collected: Collection<string, Message>, reason: string) => {
                if (reason !== 'time') return
                
                try {
                    await (await sent_message).delete()
                } catch (error) {}
            })
        }
    },
    class TextToEmojiCommand extends Command {
        message: Message
        text: string[]
        dictionary: {
            [character: string]: string
        }

        public constructor() {
            super({
                names: ['tte'],
                description: '–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ —ç–º–æ–¥–∑–∏.',
                additional: '–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏.',
                args: [
                    {
                        name: 'text',
                        description: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏/–∏–ª–∏ —Ü–∏—Ñ—Ä—ã.',
                        required: true,
                        features: 'join'
                    }
                ]
            })

            this.dictionary = {
                'a': ':regional_indicator_a:', 'b': ':regional_indicator_b:', 'c': ':regional_indicator_c:', 'd': ':regional_indicator_d:', 'e': ':regional_indicator_e:',
                'f': ':regional_indicator_f:', 'g': ':regional_indicator_g:', 'h': ':regional_indicator_h:', 'i': ':regional_indicator_i:', 'j': ':regional_indicator_j:',
                'k': ':regional_indicator_k:', 'l': ':regional_indicator_l:', 'm': ':regional_indicator_m:', 'n': ':regional_indicator_n:', 'o': ':regional_indicator_o:',
                'p': ':regional_indicator_p:', 'q': ':regional_indicator_q:', 'r': ':regional_indicator_r:', 's': ':regional_indicator_s:', 't': ':regional_indicator_t:',
                'u': ':regional_indicator_u:', 'v': ':regional_indicator_v:', 'w': ':regional_indicator_w:', 'x': ':regional_indicator_x:', 'y': ':regional_indicator_y:',
                'z': ':regional_indicator_z:', ' ': ' ', '\n': '\n',
                '0': ':zero:', '1': ':one:', '2': ':two:', '3': ':three:', '4': ':four:',
                '5': ':five:', '6': ':six:', '7': ':seven:', '8': ':eight:', '9': ':nine:'
            }
        }

        public async execute(args: Command_Args, pars: Command_Pars) {
            this.message = args.message as Message
            this.text = Array.from((args.text as string).toLocaleLowerCase())

            const rt = []
            for (const char of this.text) {
                if (!this.dictionary.hasOwnProperty(char)) continue
                rt.push(this.dictionary[char])
            }
            const text = rt.join(' ').replace(/\n\s/g, '\n')

            if (text.replace(/\s/g, '') == '') {
                const Embed = new EmbedBuilder()
                    .setDescription('üö´ –£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.')
                return this.message.channel.send({ embeds: [Embed] })
            }
            if (text.length >= 2000) {
                const Embed = new EmbedBuilder()
                    .setDescription('üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ.')
                return this.message.channel.send({ embeds: [Embed] })
            }

            await this.message.channel.send(text)
        }
    },
    class TranslateWrongLayoutCommand extends Command {
        message: Message
        text: string[]
        dictionary: {
            [character: string]: string
        }

        public constructor() {
            super({
                names: ['twl'],
                description: '–ü–µ—Ä–µ–≤–æ–¥–∏—Ç ntrcn –≤ —Ç–µ–∫—Å—Ç.',
                additional: '–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏.',
                args: [
                    {
                        name: 'text',
                        description: '–¢–µ–∫—Å—Ç, –ª–∏–±–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
                        required: true,
                        features: 'join'
                    }
                ]
            })

            this.dictionary = {
                'f': '–∞', 'F': '–ê', ',': '–±', '<': '–ë', 'd': '–≤',
                'D': '–í', 'u': '–≥', 'U': '–ì', 'l': '–¥', 'L': '–î',
                't': '–µ', 'T': '–ï', '`': '—ë', '~': '–Å', ';': '–∂',
                ':': '–ñ', 'p': '–∑', 'P': '–ó', 'b': '–∏', 'B': '–ò',
                'q': '–π', 'Q': '–ô', 'r': '–∫', 'R': '–ö', 'k': '–ª',
                'K': '–õ', 'v': '–º', 'V': '–ú', 'y': '–Ω', 'Y': '–ù',
                'j': '–æ', 'J': '–û', 'g': '–ø', 'G': '–ü', 'h': '—Ä', 
                'H': '–†', 'c': '—Å', 'C': '–°', 'n': '—Ç', 'N': '–¢',
                'e': '—É', 'E': '–£', 'a': '—Ñ', 'A': '–§', '[': '—Ö',
                '{': '–•', 'w': '—Ü', 'W': '–¶', 'x': '—á', 'X': '–ß',
                'i': '—à', 'I': '–®', 'o': '—â', 'O': '–©', ']': '—ä',
                '}': '–™', 's': '—ã', 'S': '–´', 'm': '—å', 'M': '–¨',
                '\'': '—ç', '"': '–≠', '.': '—é', '>': '–Æ', 'z': '—è',
                'Z': '–Ø', '@': '"', '#': '‚Ññ', '$': ';', '^': ':',
                '&': '?', '?': ','
            }
        }

        public async execute(args: Command_Args, pars: Command_Pars) {
            this.message = args.message as Message
            if (message_link.test(args.text as string)) {
                this.text = Array.from((await fetchMessageLink(args.text as string)).content)
            } else { this.text = Array.from(args.text as string) }

            const rt = this.text.map(v => this.dictionary.hasOwnProperty(v) ? this.dictionary[v] : v)
            if (rt.empty) {
                const Embed = new EmbedBuilder()
                    .setDescription('üö´ –£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.')
                return this.message.channel.send({ embeds: [Embed] })
            }

            await this.message.channel.send(rt.join(''))
        }
    }
]

export default command_array